
<!DOCTYPE html>
<html>
   <head>

<script id="vertex" type="x-shader">
attribute vec2 aVertexPosition;

void main()
{
   gl_Position = vec4(aVertexPosition, 0.0, 1.0);
}
      </script>
      
      <script id="fragment" type="x-shader">


#ifdef GL_ES
precision highp float;
#endif



uniform float time;
uniform vec2 resolution;

vec3 rotate( vec3 pos, float x, float y, float z )
{

	return vec3(0.);
}

float traceDepth( vec3 r )
{

//dirty ass rotation matrix
	vec3 DARM = vec3( mat3( 1.0, 0.0, 0.0, 0.0, cos(time), -sin(time ), 0.0, sin( time), cos(time ) )
	*mat3( cos( time ), 0.0, sin( time), 0.0, 1.0, 0.0, -sin(time), 0.0, cos(time) ) *
		mat3( cos( time ), -sin( time ), 0.0, sin( time ), cos( time), 0.0, 0.0, 0.0, 1.0 )*r );


	float rad = 0.0;
	float hit = 0.0;
	float p = 8.0;
	float d = 1.0;
	for( int i = 0; i < 10; i++ )
	{

			rad = length( DARM );

			if( rad > 1.5 )
			{
				hit = 0.5 * log(rad) * rad / d;
			}else{

			float th = atan( length( DARM.xy ), DARM.z );
			float phi = atan( DARM.y, DARM.x);
			float rado = rad*rad*rad*rad*rad;
			d = pow(rad, 7.0) * 7.0 * d + 1.0;

			float sint = sin( th * p );
			DARM.x = rado * sint * cos( phi * p );

			DARM.y = rado * sint * sin( phi * p );
			DARM.z = rado * cos( th * p ) ;
			DARM += r;
			}

	}

	return hit;

}

vec3 eps = vec3( .1, 0.0, 0.0 );

void main()
{
	vec2 pos = -2.0 + 2.5 * gl_FragCoord.xy/resolution.xy*1.3;

	pos.x *= resolution.x / resolution.y;

	vec3 ro = vec3( pos, -1.2 );
	vec3 la = vec3( 0.0, 0.0, 1.0 );

	vec3 cameraDir = normalize( la - ro );
	vec3 cameraRight = normalize( cross( cameraDir, vec3( 0.0, 1.0, 0.0 ) ) );
	vec3 cameraUp = normalize( cross( cameraRight, cameraDir ) );


	vec3 rd = normalize( cameraDir + vec3( pos, 0.0 ) );

	float t = 0.0;
	float d = 100.0;

	vec3 r;

	vec3 color = vec3(0.0);

	for( int i = 0; i < 30; i++ ){


		if( d > .001 )
		{
			r = ro + rd * t;
			d = traceDepth( r );
			t+=d;

		}
	}

	  	vec3 n = vec3( ((traceDepth( r - eps )

	  		/ traceDepth( r - eps ))*.07


	  		) + traceDepth( r - eps ),
	  			traceDepth( r - eps.yxz ) - traceDepth( r - eps.yxz ),
	  			traceDepth( r + eps.zyx ) + traceDepth( r - eps.zyx ) );


	vec3 mat = vec3( .5, .1, .3 );
 	vec3 light = vec3( sin(time), .5, -2.0 );
	vec3 lightCol = vec3(.6, .4, .5);

	vec3 ldir = normalize( light - r );
  	vec3 diff = dot( ldir, n ) * lightCol * 60.0;


	color = diff  * mat;

    gl_FragColor = vec4( vec3(diff.x*0.5), 1.0 );
}



</script>
      

<script type="text/javascript">

var aspect, gl;
function init()
{
   // create webgl context on the canvas element
   var canvas = document.getElementById("canvas");
   aspect = canvas.width / canvas.height;
   try
   {
      gl = canvas.getContext("experimental-webgl");
   }
   catch (e)
   {
      document.write("Whoops! No useful WEB-GL impl available. Are you browsing on your mum's Nokia?.<br>" + e.message);
      return;
   }
   gl.viewport(0, 0, canvas.width, canvas.height);
   gl.clearColor(0, 0, 0, 1);
   gl.clear(gl.COLOR_BUFFER_BIT);
   
   // get the vertex and fragment shader source
   var v = document.getElementById("vertex").firstChild.nodeValue;
   var f = document.getElementById("fragment").firstChild.nodeValue;
   
   // compile and link the shaders
   var vs = gl.createShader(gl.VERTEX_SHADER);
   gl.shaderSource(vs, v);
   gl.compileShader(vs);
   
   var fs = gl.createShader(gl.FRAGMENT_SHADER);
   gl.shaderSource(fs, f);
   gl.compileShader(fs);
   
   var program = gl.createProgram();
   gl.attachShader(program, vs);
   gl.attachShader(program, fs);
   gl.linkProgram(program);
   
  // debug shader compile status
   var error = false;
   if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS))
   {
      error = true;
      console.log(gl.getShaderInfoLog(vs));
   }
   
   if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS))
   {
      error = true;
      console.log(gl.getShaderInfoLog(fs));
   }
   
   if (!gl.getProgramParameter(program, gl.LINK_STATUS))
   {
      error = true;
      console.log(gl.getProgramInfoLog(program));
   }
   if (error) return;
   
   var pause = false;
   var firstTime = Date.now();
   (f = function() {
      if (!pause)
      {
         var vertices = new Float32Array(
            [
               -1, 1*aspect, 1, 1*aspect, 1, -1*aspect,
               -1, 1*aspect, 1, -1*aspect, -1, -1*aspect
            ]);
         
         var vbuffer = gl.createBuffer();
         gl.bindBuffer(gl.ARRAY_BUFFER, vbuffer);
         gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
         
         var triCount = 2,
             numItems = vertices.length / triCount;
         
         gl.useProgram(program);
         var time = (Date.now() - firstTime) / 1000.0;
         program.time = gl.getUniformLocation(program, "time");
         gl.uniform1f(program.time, time);
         program.resolution = gl.getUniformLocation(program, "resolution");
         gl.uniform2f(program.resolution, canvas.width, canvas.height);


         
         program.aVertexPosition = gl.getAttribLocation(program, "aVertexPosition");
         gl.enableVertexAttribArray(program.aVertexPosition);
         gl.vertexAttribPointer(program.aVertexPosition, triCount, gl.FLOAT, false, 0, 0);
         
         gl.drawArrays(gl.TRIANGLES, 0, numItems);
      }
      requestAnimationFrame(f);
   })();
  
}
      </script>

    
   </head>
  <body onload="init()" style="
    background: black;
    color: white;
    font-family: monospace;
    font-size: 200%;
    text-align: center;
">
     
   
	  <canvas id="canvas" width="1024%" height="960%" margin="0-auto" style="
    margin: 0 auto;
    width: 50%;
"></canvas>
   
    
   <a href="
https://matthewroberthenderson.github.io/Noise/
" style="
    color: white;
    /* -webkit-text-decorations-in-effect: none; */
"><p><</p></a>
   

</body>
</html>
